// <auto-generated />
using System;
using EmployeeManagement.Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeeManagement.Entities.Migrations
{
    [DbContext(typeof(EmployeesManagementDBContext))]
    [Migration("20190330085934_AddUserAndPassword")]
    partial class AddUserAndPassword
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeeManagement.Entities.Models.AbsenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AbsenceTypes");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.DayExtensions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AffectationDate");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int?>("ExtensionTypeId");

                    b.Property<int>("HoursNumber");

                    b.Property<DateTimeOffset>("ModificatedAt");

                    b.Property<int>("PersonsId");

                    b.Property<bool>("State");

                    b.HasKey("Id");

                    b.HasIndex("ExtensionTypeId");

                    b.HasIndex("PersonsId");

                    b.ToTable("DayExtensions");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.DisplacementTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DisplacementTypes");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.DisplacementsDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTime>("DisplacementDate");

                    b.Property<int?>("DisplacementTypeId");

                    b.Property<int>("HoursNumber");

                    b.Property<DateTimeOffset>("ModificatedAt");

                    b.Property<int>("PersonsId");

                    b.Property<bool>("State");

                    b.HasKey("Id");

                    b.HasIndex("DisplacementTypeId");

                    b.HasIndex("PersonsId");

                    b.ToTable("DisplacementsDays");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.ExtensionTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ExtensionTypes");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.Persons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired();

                    b.Property<string>("CorporationEmail")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Locality")
                        .IsRequired();

                    b.Property<DateTimeOffset>("ModificatedAt");

                    b.Property<string>("NIF")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired();

                    b.Property<bool>("State");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.Trainings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificationId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int?>("DegreeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsOfficial");

                    b.Property<DateTimeOffset>("ModificatedAt");

                    b.Property<int>("PersonsId");

                    b.Property<DateTime>("StartDate");

                    b.Property<bool>("State");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("PersonsId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.Vacations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AbsenseTypeId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<DateTimeOffset>("ModificatedAt");

                    b.Property<int>("PersonsId");

                    b.Property<bool>("State");

                    b.HasKey("Id");

                    b.HasIndex("AbsenseTypeId");

                    b.HasIndex("PersonsId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.DayExtensions", b =>
                {
                    b.HasOne("EmployeeManagement.Entities.Models.ExtensionTypes", "ExtensionType")
                        .WithMany()
                        .HasForeignKey("ExtensionTypeId");

                    b.HasOne("EmployeeManagement.Entities.Models.Persons")
                        .WithMany("DayExtensions")
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.DisplacementsDay", b =>
                {
                    b.HasOne("EmployeeManagement.Entities.Models.DisplacementTypes", "DisplacementType")
                        .WithMany()
                        .HasForeignKey("DisplacementTypeId");

                    b.HasOne("EmployeeManagement.Entities.Models.Persons")
                        .WithMany("DisplacementsDays")
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.Trainings", b =>
                {
                    b.HasOne("EmployeeManagement.Entities.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("CertificationId");

                    b.HasOne("EmployeeManagement.Entities.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.HasOne("EmployeeManagement.Entities.Models.Persons")
                        .WithMany("Trainings")
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeManagement.Entities.Models.Vacations", b =>
                {
                    b.HasOne("EmployeeManagement.Entities.Models.AbsenceType", "AbsenseType")
                        .WithMany()
                        .HasForeignKey("AbsenseTypeId");

                    b.HasOne("EmployeeManagement.Entities.Models.Persons")
                        .WithMany("Vacations")
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
