@using EmployeeManagement.BL.Interfaces;

@inject IDisplacementTypesBL displacementTypes;
@inject IPersonsBL persons;

@{
    ViewData["Title"] = "Desplazamientos de jornada";
    var firstDayOfTheYear = new DateTime(DateTime.Now.Year, 1, 1);
    var lastDayOfTheYear = new DateTime(DateTime.Now.Year + 1, 1, 1).AddDays(-1);
}

<h1>Desplazamientos de jornada</h1>

@(Html.Kendo().Grid<EmployeeManagement.Entities.Models.DisplacementsDay>()
        .Name("grid")
        .Columns(columns =>
        {
            columns.Command(command =>
            {
                command.Destroy().Text(" ");
            }).Title(" ").Width(35);

            columns.ForeignKey(p => p.PersonsId, persons.GetIdsAndNames(), "Id", "Name")
                 .Filterable(filterable =>
                     filterable.Search(true).Multi(true).CheckAll(true)
                     )
                     .ClientFooterTemplate("Total Empleados: #=max#")
                     .Width(300);

            columns.ForeignKey(p => p.DisplacementTypeId, displacementTypes.Get(), "Id", "Name").Width(220);
            columns.Bound(p => p.DisplacementDate).Format("{0: dd/MM/yyyy}").Width(200);
            columns.Bound(p => p.HoursNumber)
                     .ClientFooterTemplate("Total horas: #=sum#")
                     .ClientGroupFooterTemplate("Total empleado: #=sum#")
                     .Width(180);
        })
        .Filterable()
        .Pageable(p =>
        {
            p.Refresh(true);
            p.PageSizes(new int[] { 50, 100, 200, 500, 1000 });
            p.ButtonCount(5);
        })
        .ToolBar(toolbar =>
        {
            toolbar.Create().Text("Añadir");
            toolbar.Excel().Text("Exportar a Excel");
            toolbar.Pdf().Text("Exportar a PDF");
        })
        .Excel(excel => excel
            .AllPages(true)
                .FileName("Desplazamientos de jornada.xlsx")
                .Filterable(true)
            )
            .Pdf(pdf => pdf
            .AllPages()
            .FileName("Desplazamientos de jornada.pdf")
        )
         .Events(p => p.Edit("onGridEdit").DataBound("onDataBoundRemoveButtonsPreviousDate"))
        .Pageable(p => p.AlwaysVisible(false))
        .Sortable()
        .Scrollable()
        .Groupable()
        .Editable(editable => editable.Mode(GridEditMode.PopUp).Window(window => window.Width(500).Title("Desplazamiento de jornada")))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Filter(p => p.Add(x => x.DisplacementDate).IsGreaterThanOrEqualTo(firstDayOfTheYear).And().IsLessThanOrEqualTo(lastDayOfTheYear))
             .Aggregates(aggregates =>
             {
                 aggregates.Add(p => p.PersonsId).Max();
                 aggregates.Add(p => p.HoursNumber).Sum();
             })
            .Group(groups => groups.Add(p => p.PersonsId))
            .Sort(sort => sort.Add("DisplacementDate").Descending())
            .Events(p => p.Error("errorEx").RequestStart("onRequestStart").RequestEnd("onRequestEnd"))
            .PageSize(50)
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.State).DefaultValue(true);
                })
            .Batch(false)
            .ServerOperation(true)
            .Read(read => read.Action("Get", "DisplacementsDay"))
            .Create(read => read.Action("Add", "DisplacementsDay").Data("getSelectedPersons"))
            .Destroy(destroy => destroy.Action("Delete", "DisplacementsDay"))
        )

)

